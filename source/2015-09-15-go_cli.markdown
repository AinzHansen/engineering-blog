---
title: pip uninstall catalyze
date: 2015-09-15
author: josh
author_full: Josh Ault
author_alt:
tags: cli, rewrite, golang, go, python
---

We've recently begun to notice the number of support requests we receive from Windows based users has been on the rise. The requests ranged anywhere from help importing data into a database service to redeploying their code service. Normally this isn't a problem and would be a self-service task with our Python CLI. However, if anyone has attempted to use Python on Windows, it becomes clear that it is not always a smooth and easy process. We had to support our Windows users and we needed to support them soon. So we decided to rewrite the CLI in Go.

## Go

After spending some time with Go, it's a fairly simple language to understand. With a background primarily in Python, Java, Objective-C, and Swift, I was able to pick up Go rather quickly. It's a simplistic language which should be easy to pick up for any seasoned developer. If there is a challenge reading go code, it is more likely to be because of lack of domain knowledge rather than ability to read the code itself.

Concurrency in go couldn't get any easier by executing a goroutine with the keyword `go`. Once concurrency and threading get added in, it can become difficult to manage a pipeline of communication between the threads. Go solves this with channels and the `chan` keyword. Just send in a `chan` to a goroutine to enable bidirectional communication. These basic concepts and ease of use make Go a likely candidate for any future tasks. However there are some idiosyncrasies. After a few days I started to notice every line was either a method call or an if statement. 

## Why the switch?

One of the attractions to Go was the enabling of our Windows customers. Although cross platform capabilities (including Windows and Linux) was the primary driver behind the rewrite, there are a wide variety of other benefits we've gained from switching. First off, no one needs to install Go to use the Go CLI! Go gives us the ability to create binary files which we can distribute to customers. The only "installation" process is putting the binary in a directory in your $PATH in which you have write permissions. This greatly decreases the barrier of entry for new customers and enormously increases the ease of installation. (The write permissions requirement is so that the CLI can self update).

Speed was another unexpected benefit from jumping ship. At first Go was an experimental task. However we quickly realized that the new CLI seemed snappier than the old CLI. According to [Benchmarks Game](http://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=go&lang2=python3), Go outperforms Python in nearly every test. This was something with which our customers and our engineering team is going to be very pleased.

## Static typed vs Non-static typed

The most obvious difference between Go and Python is that Go is staticly typed and Python is not. This helped reveal inconsistencies in our APIs. With Go being staticly typed, we were able to model out every request and response object we expect to receive and send to the API in a [single file](https://github.com/catalyzeio/cli/blob/master/models/models.go). If we saw overlap in this file, we knew we needed to fix the API to standardize response models. Similarly, if we ever unmarshalled the HTTP response into a standard JSON object just to create one of our Go models, we knew the API had to be fixed. Here's a quick example

```
var m map[string]string
json.Unmarshal(resp, &m)
return &models.Task{
	ID: m["taskId"],
}
```

Here we are unmarshalling the response into a map simply so we can create a common Go model that we use in the rest of the CLI code. Ideally, we should be able to unmarshall directly to a Task model

```
var task models.Task
json.Unmarshal(resp, &task)
return &task
```

In an unexpected way, we were able to identify places where our API needed quality improvement as well as immediate improvements for quick and easy fixes.

## How do I download the new CLI?

So how do you download this new Go CLI? First, get rid of the Python CLI.

```
pip uninstall catalyze
```

Then head over to the [github repo](https://github.com/catalyzeio/cli#automatic-updates) and download the appropriate binary for your OS. Lastly, forget about updating the CLI because this is taken care of automatically. When new versions are pushed out, you'll get the latest and greatest right away. Remember to put the binary in a directory where you have **write permissions** for this to work! 

Be sure to check out the [CLI documentation](https://github.com/catalyzeio/cli/blob/master/Docs.md) to check out some of the fantastic new features we've built. Let us know what you think by dropping us an [email](mailto:hello@catalyze.io)!